{"mappings":"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","sources":["./src/components/timer/timer__class.ts","./src/components/timer/timer.ts"],"sourcesContent":["export { iDestructible, iTimer, iTimerToggleble, iTimerPauseble, ArrayOfDestructible }\r\n\r\ninterface iDestructible {\r\n  destruct: () => void;\r\n}\r\ninterface iTimer {\r\n  play(): void;\r\n  stop(): void;\r\n}\r\ninterface iTimerToggleble extends iTimer {\r\n  playPauseToggle(): void;\r\n}\r\ninterface iTimerPauseble extends iTimer {\r\n  pause(): void;\r\n}\r\ntype ArrayOfDestructible = [() => void, ...Array<iDestructible>];\r\n\r\nexport default class Timer implements iDestructible, iTimer, iTimerToggleble, iTimerPauseble{\r\n  protected readonly SEC = 1000;\r\n  protected readonly MIN = 60 * this.SEC;\r\n  protected readonly HOU = 60 * this.MIN;\r\n\r\n  protected countedTime: Date;\r\n  protected lastStartTime: Date;\r\n  protected isActive: boolean;\r\n  protected idInterval: number | null;\r\n  protected readonly selfElement: Element;\r\n\r\n  private readonly buttonPlayPauseToggle: Element;\r\n  private readonly buttonStop: Element;\r\n  private readonly outputElement: Element | HTMLInputElement;\r\n  private readonly bindedPlayPauseToggle = this.playPauseToggle.bind(this);\r\n  private readonly bindedStop = this.stop.bind(this);\r\n  constructor(element: Element) {\r\n    let temp = element.querySelector('.timer__button-play_pause');\r\n    if (!temp) throw new ReferenceError(\r\n      `not elem \".timer__button-play_pause\" in tag: ${element.tagName} class: ${element.classList.toString}`);\r\n    this.buttonPlayPauseToggle = temp;\r\n\r\n    temp = element.querySelector('.timer__button-stop');\r\n    if (!temp) throw new ReferenceError(\r\n      `not elem \".timer__button-stop\" in tag: ${element.tagName} class: ${element.classList.toString}`);\r\n    this.buttonStop = temp;\r\n\r\n    temp = element.querySelector('.timer__input');\r\n    if (!temp) throw new ReferenceError(\r\n      `not elem \".timer__input\" in tag: ${element.tagName} class: ${element.classList.toString}`);\r\n    this.outputElement = temp;\r\n\r\n    this.selfElement = element;\r\n    this.countedTime = new Date(0);\r\n    this.lastStartTime = new Date();\r\n    this.isActive = false;\r\n    this.idInterval = null;\r\n\r\n    this.buttonPlayPauseToggle.addEventListener('click', this.bindedPlayPauseToggle);\r\n    this.buttonStop.addEventListener('click', this.bindedStop);\r\n  }\r\n  play() {\r\n    if (!isNaN(this.idInterval!))\r\n      clearInterval(this.idInterval!);\r\n    this.lastStartTime.setTime(Date.now());\r\n    this.isActive = true;\r\n    this.idInterval = setInterval(this.tick.bind(this), 1000);\r\n    setTimeout((() => this.selfElement.classList.add('timer-active')).bind(this), 0);\r\n  }\r\n  pause() {\r\n    this.isActive = false;\r\n    this.countedTime.setTime(Date.now() - this.lastStartTime.getTime() + this.countedTime.getTime());\r\n    if (!isNaN(this.idInterval!))\r\n      clearInterval(this.idInterval!);\r\n    setTimeout((() => this.selfElement.classList.remove('timer-active')).bind(this), 0);\r\n  }\r\n  private tick() {\r\n    let lengthTime = Date.now();\r\n    if (!this.isActive) return;\r\n\r\n    setTimeout((() => {\r\n      lengthTime += this.countedTime.getTime() - this.lastStartTime.getTime();\r\n      let temp = Math.trunc((lengthTime % this.MIN) / this.SEC);\r\n      let lengthTimeStr = temp.toString().padStart(2, '0');\r\n      if (lengthTime / this.MIN >= 1) {\r\n        lengthTime -= temp;\r\n        temp = Math.trunc((lengthTime % this.HOU) / this.MIN);\r\n        lengthTimeStr = temp.toString().padStart(2, '0') + ':' + lengthTimeStr;\r\n        if (lengthTime / this.HOU >= 1) {\r\n          lengthTime -= temp;\r\n          temp = Math.trunc(lengthTime / this.HOU);\r\n          lengthTimeStr = temp.toString().padStart(2, '0') + ':' + lengthTimeStr;\r\n        }\r\n      }\r\n      setTimeout(this.render.bind(this), 0, lengthTimeStr);\r\n    }).bind(this), 0);\r\n  }\r\n  private render(time: string = '00') {\r\n    if ('value' in this.outputElement)\r\n      this.outputElement.value = time\r\n    else\r\n      this.outputElement.textContent = time;\r\n  }\r\n  playPauseToggle() {\r\n    if (this.isActive)\r\n      this.pause()\r\n    else\r\n      this.play();\r\n  }\r\n  stop() {\r\n    this.isActive = false;\r\n    if (!isNaN(this.idInterval!))\r\n      clearInterval(this.idInterval!);\r\n    this.countedTime.setTime(0);\r\n    setTimeout((() => this.selfElement.classList.remove('timer-active')).bind(this), 0);\r\n    setTimeout(this.render.bind(this), 0, '00');\r\n  }\r\n  destruct() {\r\n    this.stop();\r\n    this.buttonPlayPauseToggle.removeEventListener('click', this.bindedPlayPauseToggle);\r\n    this.buttonStop.removeEventListener('click', this.bindedStop);\r\n  }\r\n}","import Timer from './timer__class';\r\nimport * as timerInterfaces from './timer__class';\r\n\r\nconst arrayOfDestructible: timerInterfaces.ArrayOfDestructible = [\r\n  function () {\r\n    for (let i = 1; i < this.length; this[i++].destruct()) { }\r\n  },\r\n];\r\n\r\n(document as any).q = arrayOfDestructible;\r\n\r\ndocument.querySelectorAll('.timer').forEach(q => arrayOfDestructible.push((q as any).myTimer = new Timer(q)));"],"names":["Timer","constructor","element","$eb1bb9566f3f431d28f6bbc25948e$var$_defineProperty","this","SEC","MIN","playPauseToggle","bind","stop","temp","querySelector","ReferenceError","concat","tagName","classList","toString","buttonPlayPauseToggle","buttonStop","outputElement","selfElement","countedTime","Date","lastStartTime","isActive","idInterval","addEventListener","bindedPlayPauseToggle","bindedStop","play","isNaN","clearInterval","setTime","now","setInterval","tick","setTimeout","add","pause","getTime","remove","lengthTime","Math","trunc","lengthTimeStr","padStart","HOU","render","time","value","textContent","destruct","removeEventListener","arrayOfDestructible","i","length","document","q","querySelectorAll","forEach","push","myTimer","$eb1bb9566f3f431d28f6bbc25948e$export$default"],"version":3,"file":"timer.a239f2af.js.map"}